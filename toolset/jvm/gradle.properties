############ --- This file groups settings by observed speed impact --- #############
###                                                                               ###
###      These are grouped into three categories:                                 ###
###          1. Explicitly off for speed or build reasons                         ###
###          2. Explicitly on for observed performance reasons                    ###
###          3. No significant noticed or observed performance benefits           ###
###              or miscellaneous settings                                        ###
###                                                                               ###
############ --- This file groups settings by observed speed impact --- #############

############ ---------- Explicitly off start --------- ############
                                                                ###
                                                                ###
# Gradle.useLogger does not work with this value set to true + adds to dependency resolution time in configuration stage when storing configuration cache entry
# TODO Ideally we want this on in the future, because it gives us full parallelism and instantly start builds that have run before
org.gradle.configuration-cache=true
org.gradle.configuration-cache.problems=fail
org.gradle.configuration-cache.max-problems=0
                                                                ###
                                                                ###
############ ----------Explicitly off end ------------ ############



############ ---------- Explicitly on start ---------- ############
                                                                ###
                                                                ###
# Observed ~1s build time -> ~7s when this setting is false     ###
# for cached builds (running a second time)                     ###
org.gradle.daemon=true
                                                                ###
                                                                ###
############# ---------- Explicitly on end ---------- #############



############ ---------- Minimal impact/Miscellaneous start ---------- ###########
                                                                              ###
                                                                              ###
                                                                              ###
                                                                              ###

org.gradle.configureondemand=false

# Activate Gradle build cache - switch between branches/commits without rebuilding every time
org.gradle.caching=true

# Enables parallelism for sub project tasks
org.gradle.parallel=true

# See issue with intellij here: https://youtrack.jetbrains.com/issue/IDEA-262702/Grade-reload-fails-with-enabled-Gradle-parallelism -> trying with 2023.3.Beta to see if issues resolve
# gradle.tooling.models.parallel.fetch=true

# Enables output capturing during build scan. We may want to turn these off for any sensitive data/leaking. See: https://docs.gradle.com/enterprise/gradle-plugin/#capturing_build_and_test_outputs
systemProp.scan.capture-build-logging=true
systemProp.scan.capture-test-logging=true
# Setting this to true ensures that uploading is done as a part of the build. If you want the build to finish sooner, and
# also are not in an environment that terminates/exits before the upload can complete, set it to true.
# True value is currently being used to us an 'overall' more accurate build time
systemProp.scan.uploadInBackground=false

# Configure the Grade Daemon - memory and same encoding on all machines
org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=384m -Dfile.encoding=UTF-8 -XX:+HeapDumpOnOutOfMemoryError

# Enables file system watching. This is on by default since Gradle 7, but being declarative makes it more visible what the full build is doing
org.gradle.vfs.watch=true

# Show the individual deprecation warnings and determine if they come from our own scripts or plugins
org.gradle.warning.mode=all

# Gives us explicit control of exactly where we can use the kotlin std-lib library,
# rather than implicit assumption of it being used everywhere
kotlin.stdlib.default.dependency=false

## Uncomment this + the k2 part of commons plugin to use the k2 compiler
#kotlin.experimental.tryK2=true
#kapt.use.k2=true


                                                                              ###
                                                                              ###
                                                                              ###
############ ---------- Minimal impact/Miscellaneous end ---------- #############